{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAIAC,KAAO,CACLC,KAAMC,SAASC,cAAe,SAC9BC,WAAYF,SAASC,cAAe,kBACpCE,UAAWH,SAASC,cAAe,iBACnCG,MAAOJ,SAASC,cAAe,oBAKjCH,KAAKC,KAAKM,iBAAiB,UAE3B,SAAsBC,G,kBA6BpB,IAAuBC,EAAUC,GAAVD,EAjBLE,EAiBeD,EAjBRE,EAkBd,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEL,WAAUC,UAEpBK,EAAO,CAAEN,WAAUC,S,GAEpBA,E,KAzBJU,MAAK,SAAAC,G,IAAGZ,EAAQY,EAARZ,SAAUC,EAAKW,EAALX,MAEjBZ,EAAAwB,OAAOC,QAAQ,qBAAoCC,OAAff,EAAS,QAAYe,OAANd,EAAM,M,IAE1De,OAAM,SAAAJ,G,IAAGZ,EAAQY,EAARZ,SAAUC,EAAKW,EAALX,MAElBZ,EAAAwB,OAAOI,QAAQ,oBAAmCF,OAAff,EAAS,QAAYe,OAANd,EAAM,M,IAG3DiB,SAAQ,WAAWhB,IAAUiB,GAAa5B,KAAKC,KAAK4B,O,IACrDjB,GAAgBkB,C,EAtBhBtB,EAAEuB,iBAUF,IARA,IAAM3B,GAAcJ,KAAKI,WAAW4B,MAC9BF,GAAa9B,KAAKK,UAAU2B,MAC5BJ,GAAe5B,KAAKM,MAAM0B,MAE5BpB,EAAeR,EAIV6B,EAAQ,EAAGA,GAASL,EAAaK,IAAOC,EAAAD,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport \"notiflix/dist/notiflix-3.2.6.min.css\";\n\n\nrefs = {\n  form: document.querySelector(`.form`),\n  firstDelay: document.querySelector(`[name=\"delay\"]`),\n  stepDelay: document.querySelector(`[name=\"step\"]`),\n  amout: document.querySelector(`[name=\"amount\"]`),\n}\n// console.log(refs);\n\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(e)  {\n    e.preventDefault();\n    // const { delay, step, amount } = e.currentTarget.elements;\n    const firstDelay = +refs.firstDelay.value;\n    const stepValue = +refs.stepDelay.value;\n    const amountValue = +refs.amout.value;\n\n    let promiseDelay = firstDelay;\n  \n    // const promises = [];\n  \n    for (let index = 1; index <= amountValue; index++) {\n      createPromise(index, promiseDelay)\n      .then(({ position, delay }) => {\n        // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      })\n\n    .finally(() => { if(index === amountValue) refs.form.reset()})\n    promiseDelay += stepValue;\n\n  }\n  };\n\n\n  function createPromise(position, delay) {\n      return new Promise((resolve, reject) => {\n        const shouldResolve = Math.random() > 0.3;\n        setTimeout(() => {\n          if (shouldResolve) {\n            resolve({ position, delay });\n          } else {\n            reject({ position, delay });\n          }\n        }, delay);\n      });\n    }\n\n"],"names":["$h6c0i","parcelRequire","refs","form","document","querySelector","firstDelay","stepDelay","amout","addEventListener","e","position","delay","index","promiseDelay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","param","Notify","success","concat","catch","failure","finally","amountValue","reset","stepValue","preventDefault","value","index1","_loop"],"version":3,"file":"03-promises.676a78e5.js.map"}